/*

struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
  
  Node* reverseLL(Node* &head)
  {
    Node* prev=NULL;
    Node* curr=head;
    while(curr!=NULL)
    {
        Node* forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
    }
    return prev;
  }
    Node* addOne(Node* head) {
        // Your Code here
        // return head of list after adding one
        head=reverseLL(head);
        
        Node* temp=head;
        int carry=1;
        while(temp!=NULL)
        {
           int sum = carry+temp->data;
           int digit = sum%10;
           carry = sum/10;
           temp->data=digit;
           if(temp->next==NULL && carry!=0)
           {
               Node* newnode=new Node(carry);
               temp->next=newnode;
               temp=newnode;
           }
           temp=temp->next;
        }
        
        head=reverseLL(head);
        return head;
    }
};
/*

struct Node
{
    int data;
    struct Node* next;

    Node(int x){
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
  
  Node* reverseLL(Node* &head)
  {
    Node* prev=NULL;
    Node* curr=head;
    while(curr!=NULL)
    {
        Node* forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
    }
    return prev;
  }
    Node* addOne(Node* head) {
        // Your Code here
        // return head of list after adding one
        head=reverseLL(head);
        
        Node* temp=head;
        int carry=1;
        while(temp!=NULL)
        {
           int sum = carry+temp->data;
           int digit = sum%10;
           carry = sum/10;
           temp->data=digit;
           if(temp->next==NULL && carry!=0)
           {
               Node* newnode=new Node(carry);
               temp->next=newnode;
               temp=newnode;
           }
           temp=temp->next;
        }
        
        head=reverseLL(head);
        return head;
    }
};
