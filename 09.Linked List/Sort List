class Solution {
public:

       ListNode* findMid(ListNode*head){
        ListNode*slow = head;
        ListNode*fast = head->next;
        while(fast && fast->next){
            slow = slow->next;
            fast=fast->next->next;
        }
        return slow;
    }

     ListNode* merge(ListNode* list1, ListNode* list2) {

        if(list1==NULL)
        {
            return list2;
        }
        if(list2==NULL)
        {
            return list1;
        }
        ListNode* ans=new ListNode(-1);
        ListNode* mptr=ans;

        while(list1!=NULL && list2!=NULL)
        {
            if(list1->val <= list2->val)
            {
                mptr->next=list1;
                list1=list1->next;
                mptr=mptr->next;
            }
            else
            {
                mptr->next=list2;
                list2=list2->next;
                mptr=mptr->next;
            }
        }

        if(list2!=NULL)
        {
            mptr->next=list2;
        }
        else
        {
            mptr->next=list1;
        }

        ListNode* temp=ans;
        ans=ans->next;
        delete temp;
        return ans;
    }
    
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next) return head;
        ListNode*mid=findMid(head);
        ListNode*left=head;
        ListNode*right=mid->next;
        mid->next=NULL;

        left=sortList(left);
        right=sortList(right);

        ListNode*mergeLL=merge(left,right);
        return mergeLL;
        
    }
};
