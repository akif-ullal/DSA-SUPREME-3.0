//{ Driver Code Starts
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

Node* buildList() {
    vector<int> arr;
    string input;
    getline(cin, input);
    stringstream ss(input);
    int number;
    while (ss >> number) {
        arr.push_back(number);
    }
    if (arr.empty()) {
        return NULL;
    }
    int val = arr[0];
    int size = arr.size();

    Node* head = new Node(val);
    Node* tail = head;

    for (int i = 1; i < size; i++) {
        val = arr[i];
        tail->next = new Node(val);
        tail = tail->next;
    }

    return head;
}

void printList(Node* n) {
    while (n) {
        cout << n->data << " ";
        n = n->next;
    }
    cout << endl;
}


// } Driver Code Ends
/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution {
  public:
    // Function to add two numbers represented by linked list.
    Node* reverseLL(Node* &head)
    {
    Node* prev=NULL;
    Node* curr=head;
    while(curr!=NULL)
    {
    Node* forward=curr->next;
    curr->next=prev;
    prev=curr;
    curr=forward;
    }
    return prev;
    }
    Node* addTwoLists(Node* num1, Node* num2) {
        // code here
        if(num1==NULL && num2==NULL)
        {
            return NULL;
        }
        num1=reverseLL(num1);
        num2=reverseLL(num2);
        Node* temp1=num1;
        Node* temp2=num2;
        
        Node* res=NULL;
        Node* curr=NULL;
        int carry=0;
        while(temp1!=NULL && temp2!=NULL)
        {
            int sum=temp1->data+temp2->data+carry;
            int digit=sum%10;
            carry=sum/10;
            Node* ans=new Node(digit);
            
            if(res==NULL)
            {
                res=ans;
                curr=ans;
            }
            else
            {
                curr->next=ans;
                curr=ans;
            }
            temp1=temp1->next;
            temp2=temp2->next;
            
        }
        
        while(temp1!=NULL)
        {
            int sum=temp1->data+0+carry;
            int digit=sum%10;
            carry=sum/10;
            Node* ans=new Node(digit);
            
            if(res==NULL)
            {
                res=ans;
                curr=ans;
            }
            else
            {
                curr->next=ans;
                curr=ans;
            }
            temp1=temp1->next;
        }
        
        while(temp2!=NULL)
        {
            int sum=0+temp2->data+carry;
            int digit=sum%10;
            carry=sum/10;
            Node* ans=new Node(digit);
            
            if(res==NULL)
            {
                res=ans;
                curr=ans;
            }
            else
            {
                curr->next=ans;
                curr=ans;
            }
            temp2=temp2->next;
        }
            if (carry > 0) {
            Node* ans = new Node(carry);
            if (res == NULL) {  // Handle case where result list is empty
            res = ans;
            curr = ans;
            } else {
            curr->next = ans;
            }
}

        res=reverseLL(res);
        if(res->data==0)
        {
            Node* temp=res;
            res=res->next;
            temp->next=NULL;
            delete temp;
        }

        return res ;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    cin.ignore(); // To ignore the newline character after the integer input

    while (t--) {
        Node* num1 = buildList();
        Node* num2 = buildList();
        Solution ob;
        Node* res = ob.addTwoLists(num1, num2);
        printList(res);
    }
    return 0;
}

// } Driver Code Ends
