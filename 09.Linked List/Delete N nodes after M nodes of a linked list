delete n nodes after m nodes
  The input list will have at least one element
  Node is defined as

struct Node {
    int data;
    Node *next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/
class Solution {
  public:
    Node* linkdelete(Node* &head, int &n, int &m) {
        // code here
        if(head==NULL)
        {
            return head;
        }
        Node* temp=head;
        
        for(int i=0;i<m-1 && temp!=NULL;++i)
        {
            temp=temp->next;
        }
        
        if(temp==NULL || temp->next==NULL) 
        {
            return head;
        }
        Node* DN=temp->next;
        
        for(int i=0;i<n && DN!=NULL;++i)
        {
            Node*forward=DN->next;
           
            delete DN;
            DN=forward;
        }
        temp->next=DN;
        
        linkdelete(temp->next,n,m);
         return head;
        
    }
    
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    cin.ignore();
    while (t--) {
        vector<int> arr;
        string input;
        getline(cin, input);
        stringstream ss(input);
        int number;
        while (ss >> number) {
            arr.push_back(number);
        }

        vector<int> arr2;
        string input2;
        getline(cin, input2);
        stringstream ss2(input2);
        int number2;
        while (ss2 >> number2) {
            arr2.push_back(number2);
        }

        int n = arr2[0], m = arr2[1];

        if (arr.empty()) {
            cout << "empty" << endl;
            continue;
        }

        Node* head = new Node(arr[0]);
        Node* tail = head;
        for (int i = 1; i < arr.size(); ++i) {
            tail->next = new Node(arr[i]);
            tail = tail->next;
        }

        Solution ob;
        head = ob.linkdelete(head, n, m);
        printList(head);

        // Clean up the remaining nodes to avoid memory leaks
        while (head != NULL) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }
    return 0;
}

// } Driver Code Ends
