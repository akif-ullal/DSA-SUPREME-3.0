class Solution {
public:
//using naive approach
// bool isprime(int num)
// {
//     if(num<=1)
//     {
//         return 0;
//     }
//     for(int i=2;i<num;i++)
//     {
//         if((num%i)==0)
//         {
//             return 0;
//         }
//     }
//     return 1;
// }


//using sqrt approach
// bool isprime(int num)
// {
//     if(num<=1)
//     {
//         return 0;
//     }
//     int sqrtnum=sqrt(num);
//     for(int i=2;i<=sqrtnum;i++)
//     {
//         if((num%i)==0)
//         {
//             return 0;
//         }
//     }
//     return 1;
// }
//     int countPrimes(int n) {
//         int count=0;
//         for(int i=0;i<n;i++)
//         {
//             if(isprime(i))
//             {
//                 count++;
//             }
//         }
//         return count;
//     }
// };

//sieve of erathosthesness approacj T.C o(n*log(logn))
int countPrimes(int n) {

   vector<bool> prime(n,true);

    if(n==0) return 0;

    prime[0]=prime[1]=false;

    int count = 0;
    for(int i=2;i<n;i++)
    {
        if(prime[i])
        {
            count++;
            int j=2*i;
            while(j<n)
            {
                prime[j]=false;
                j+=i;
            }
        }
    }
  return count;
   }
 };
