#include <iostream>
#include<vector>
#include<cmath>
using namespace std;
vector<bool> normalsieve(int n)
{
  vector<bool>sieve(n,true);
  sieve[0]=sieve[1]=false;

  for(int i=2;i*i<=n;i++)
  {
    int j=i*i;
    while(j<=n)
    {
      sieve[j]=false;
      j+=i;
    }
  }
 return sieve;
}

vector<bool> segementsieve(int L,int R)
{
  vector<bool> sieve=normalsieve(sqrt(R));
  vector<int>primes;
  
  for(int i=0;i<=sieve.size();i++)
  {
    if(sieve[i])
    {
      primes.push_back(i);
    }
  }

  vector<bool> ans(R-L+1,true);
   if(L==0) ans[0]=ans[1]=false;
   if(L==1) ans[0]=false;
  for(auto prime:primes)
  {
    int first_num=(L/prime)*prime;
    if(first_num < L)
    {
      first_num+=prime;
    }
    int j=max(first_num,prime*prime);
    while(j <= R)
    {
       ans[j-L]=false;
       j+=prime;
    }
  }
  return ans;
}

int main() {
 int L=1;
 int R=10;
 vector<bool> done=segementsieve(L,R);
 for(int i=0;i<done.size();i++)
 {
    if(done[i])
    {
      cout<<i+L<<" ";
    }
 }
  return 0;
}
