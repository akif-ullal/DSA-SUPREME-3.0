#include <iostream>
using namespace std;

class Deque{
  public:
  int*arr;
  int size;
  int front;
  int rear;

  Deque(int n):size(n)
  {
    arr=new int[n];
    front=-1;
    rear=-1;
  }

void push_back(int val)
{
   if(rear==size-1)
    {
      cout<<"overflow"<<endl;
    }
    else if(front==-1 && rear==-1)
    {
      front++;
      rear++;
      arr[rear]=val;

    }
    else{
      rear++;
      arr[rear]=val;
    }
}

void pop_back()
{
   if(front==-1 && rear==-1)
    {
      cout<<"queue underflow"<<endl;
    }
    else if(front == rear)
    {
      arr[rear]=-1;
      front=-1;
      rear=-1;
    }
    else{
      arr[rear]=-1;
      rear--;
    }
}

void push_front(int value)
    {
      if(front == 0)
      {
        cout<<"queue is overflow"<<endl;
      }
      else if(front==-1 && rear==-1)
      {
        front++;
        rear++;
        arr[front]=value;
      }else{
        front--;
        arr[front]=value;
      }
    }

void pop_front()
{
   if(front==-1 && rear==-1)
    {
      cout<<"queue underflow"<<endl;
    }
    else if(front == rear)
    {
      arr[rear]=-1;
      front=-1;
      rear=-1;
    }
    else{
      arr[front]=-1;
      front++;
    }

}

  void print()
  {
    for(int i=0;i<size;i++)
    {
      cout<<arr[i]<<" ";
    }
    cout<<endl;
  }


  ~Deque() { 
        delete[] arr;
    }
};
int main() {
  Deque q(5);
  q.push_back(10);
  q.push_back(20);
  q.push_back(30);
  q.push_back(40);
  q.push_back(50);

  q.pop_front();
  q.pop_front();
  q.print();
  q.push_front(20);
  q.push_back(50);
  q.print();

    // q.pop();
    // q.pop();
    // q.pop();
    // q.pop();
    // q.pop();
    // q.pop();

 
  return 0;
}
