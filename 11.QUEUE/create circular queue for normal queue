#include <iostream>
using namespace std;

class Circularqueue{
  public:
  int*arr;
  int size;
  int front;
  int rear;

  Circularqueue(int n):size(n)
  {
    arr=new int[n];
    front=-1;
    rear=-1;
  }

  void push(int value)
  {
    if(front==-1 && rear==-1)
    {
      front++;
      rear++;
      arr[rear]=value;
    }
    else if((front==0 && rear==size-1) || (rear==front-1))
    {
      cout<<"queue overflow"<<endl;
    }
    else if(rear==size-1 && front!=0)
    {
      rear=0;
      arr[rear]=value;
    }
    else {
      rear++;
      arr[rear]=value;
    }

  }

  void pop()
  {
    if(front==-1 && rear==-1)
    {
      cout<<"queue underflow"<<endl;
    }
    else if(front == rear)
    {
      arr[rear]=-1;
      front=-1;
      rear=-1;
    }
    else if(front == size-1)
    {
      arr[front]=-1;
      front=0;
    }
    else{
      arr[front]=-1;
      front++;
    }

  }

  int getFront()
  {
    if(front==-1)
    {
      cout<<"queue is empty"<<endl;
      return -1;
    }
    else
    {
    return arr[front];
    }
  }

  int sizeofQueue()
  {
    if(rear>=front)
    {
      return rear-front+1;
    }
    else{
     return size-front+rear+1;
    }
  }

  bool isempty()
  {
    if(front == -1 && rear==-1)
    {
      return true;
    }
    else{
      return false;
    }

  }

  void print()
  {
    for(int i=0;i<size;i++)
    {
      cout<<arr[i]<<" ";
    }
    cout<<endl;
  }

  ~Circularqueue() { 
        delete[] arr;
    }
};
int main() {
  Circularqueue q(5);
  q.push(10);
  q.push(20);
  q.push(30);
  q.push(40);
  q.push(50);
  
  q.print();

    q.pop();
    q.pop();
    
    q.print();
    q.push(50);
    q.print(); 
  cout<<q.getFront()<<endl;
  cout<<q.isempty()<<endl;
  cout<<q.sizeofQueue()<<endl;

  
  return 0;
}
