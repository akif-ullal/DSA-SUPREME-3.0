class Solution {
public:

//optimized solution t.c o(n)
    int height(TreeNode* root,int &diameter)
    {
        if(root == NULL)
        return 0;

        int ls=height(root->left,diameter);
        int rs=height(root->right,diameter);
        diameter=max(diameter,ls+rs);
        return 1+max(ls,rs);
    }
    int diameterOfBinaryTree(TreeNode* root) {
      int maxi=0;
      int ans=height(root,maxi);
      return maxi;
    }
};


class Solution {
public:

    int HieghtOfBinaryTree(TreeNode* root)
    {
        if(root==NULL)
        {
            return 0;
        }
        int leftside=HieghtOfBinaryTree(root->left);
        int rightside=HieghtOfBinaryTree(root->right);
        int ans=max(leftside,rightside)+1;
        return ans;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(!root)
        return 0;

        int opt1=diameterOfBinaryTree(root->left);
        int opt2=diameterOfBinaryTree(root->right);
        int opt3=HieghtOfBinaryTree(root->left)+HieghtOfBinaryTree(root->right);
        int maxAns = max(opt1,max(opt2,opt3));
        return maxAns;
    }
};
