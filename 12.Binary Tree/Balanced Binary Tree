//optimized code t.c is o(n)
class Solution {
public:

int height(TreeNode* root)
{
    if(root==NULL)
    return 0;

    int ls=height(root->left);
    if(ls==-1)
    {
        return -1;
    }
    int rs=height(root->right);
    if(rs==-1)
    {
        return -1;
    }
    if(abs(ls-rs)>1)
    {
        return -1;
    }
    return max(ls,rs)+1;


}
    bool isBalanced(TreeNode* root) {
        int ans=height(root);
        if(ans==-1)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
};

//t.c is o(n^2)
// int height(TreeNode* root)
// {
//     if(root==NULL)
//     {
//         return 0;
//     }
//     int ls=height(root->left);
//     int rs=height(root->right);

//     int ans=max(ls,rs)+1;
//     return ans;    
// }
//     bool isBalanced(TreeNode* root) {
//         if(root==NULL)
//         return true;

//         int lh=height(root->left);
//         int rh=height(root->right);

//         bool ans = abs(lh-rh)<=1 ? true : false;

//         bool ls=isBalanced(root->left);
//         bool rs=isBalanced(root->right);
        
//        return ls && rs && ans;
//     }
// };
