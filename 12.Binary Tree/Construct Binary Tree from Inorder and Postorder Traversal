class Solution {
public:

     void mapping(vector<int>&inorder,unordered_map<int,int>&mapp)
    {
        for(int i=0;i<inorder.size();i++)
        {
            mapp[inorder[i]]=i;
        }
    }
    TreeNode* solve(unordered_map<int,int>&mapp,vector<int>& postorder, vector<int>& inorder,int inorderStart
    ,int inorderEnd,int size,int &postorderIndex)
    {
        if(postorderIndex < 0)
        {
            return NULL;
        }

        if(inorderStart > inorderEnd)
        {
            return NULL;
        }
        int element=postorder[postorderIndex];
        TreeNode* root=new TreeNode(element);
        postorderIndex--;

        int current=mapp[element];

        root->right=solve(mapp,postorder,inorder,current+1,inorderEnd,size,postorderIndex);
        root->left=solve(mapp,postorder,inorder,inorderStart,current-1,size,postorderIndex);
        
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int inorderStart=0;
        int inorderEnd=inorder.size()-1;
        int size=postorder.size();
        int postorderIndex=postorder.size()-1;
        unordered_map<int,int>mapp;
        mapping(inorder,mapp);
         TreeNode* root=solve(mapp,postorder,inorder,inorderStart,inorderEnd,size,postorderIndex);
         return root;
    }
};
