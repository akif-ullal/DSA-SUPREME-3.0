class Solution {
public:

// optimized solution o(n)
    void pathSum_finder(TreeNode* root, int targetSum,unordered_map<long long,long long>&mpp,long long currSum,long long &count)
    {
        if(!root)
        return;

        currSum+=root->val;

        if(mpp.find(currSum-targetSum)!=mpp.end())
        {
            count+=mpp[currSum-targetSum];
        }
        
        mpp[currSum]++;

        pathSum_finder(root->left,targetSum,mpp,currSum,count);
        pathSum_finder(root->right,targetSum,mpp,currSum,count);
        mpp[currSum]--;
    }
    int pathSum(TreeNode* root, int targetSum) {
        unordered_map<long long,long long>mpp;
        long long currSum=0;
        long long count=0;
        mpp[0]=1;
        pathSum_finder(root,targetSum,mpp,currSum,count);
        return count;
    }
};

//t.c is o(n^2)

//  void findTS(TreeNode* root, int targetSum,long long sum,int &count)
//     {
//         if(!root)
//         {
//             return ;
//         }
//         sum+=root->val;
//         if(sum==targetSum)
//         count++;

//         findTS(root->left,targetSum,sum,count);
//         findTS(root->right,targetSum,sum,count);
        
//     }
//     void AllNodeTraversal(TreeNode* root, int targetSum,int &count)
//     {
//         if(!root)
//         return ;
        
        
//         findTS(root,targetSum,0,count);
        

//         AllNodeTraversal(root->left,targetSum,count);
//         AllNodeTraversal(root->right,targetSum,count);
        
//     }
//     int pathSum(TreeNode* root, int targetSum) {
//        if(!root)
//        return 0;
//        int count=0;
       
//        AllNodeTraversal(root,targetSum,count);
//        return count;
//     }
// };
