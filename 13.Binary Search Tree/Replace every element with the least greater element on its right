class Node{
    public:
    int data;
    Node*right;
    Node*left;
    
    Node(int val)
    {
        this->data=val;
        right=left=NULL;
    }
};
class Solution {
  public:
  
    Node* createBST(Node* root,int element,int&ans)
    {
        if(!root)
        {
            root=new Node(element);
            
            return root;
        }
        
        
        if(element<root->data)
        {
            ans=root->data;
           
            root->left=createBST(root->left,element,ans);
        }
        else if(element>=root->data)
        {
            root->right=createBST(root->right,element,ans);
        }
        return root;
    }
    vector<int> findLeastGreater(vector<int>& arr, int n) {
        Node*root=NULL;
        vector<int>ReplaceAns(n,-1);
        for(int i=n-1;i>=0;i--)
        {
            int element=arr[i];
            int ans=-1;
            root=createBST(root,element,ans);
            ReplaceAns[i]=ans;
        }
        return ReplaceAns;
    }
};
