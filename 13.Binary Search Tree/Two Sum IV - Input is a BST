//withot taking extra vector or array
class BSTIterator {
public:

    stack<TreeNode*>stL;
    stack<TreeNode*>stR;
    void PushLeftEle(TreeNode* root)
    {
        TreeNode*curr=root;
        while(curr)
        {
            stL.push(curr);
            curr=curr->left;
        }
    }

    void PushRightEle(TreeNode* root)
    {
        TreeNode*curr=root;
        while(curr)
        {
            stR.push(curr);
            curr=curr->right;
        }
    }
    BSTIterator(TreeNode* root) {
        PushLeftEle(root);
        PushRightEle(root);
    }
    
    int next() {
        TreeNode*top=stL.top();
        stL.pop();
        if(top->right)
        {
            PushLeftEle(top->right);
        }
        return top->val;
    }

      int before() {
        TreeNode*top=stR.top();
        stR.pop();
        if(top->left)
        {
            PushRightEle(top->left);
        }
        return top->val;
    }
    
  
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false;
        BSTIterator it(root);

        int i=it.next();
        int j=it.before();

        while(i<j)
        {
            int sum=i+j;

            if(sum==k)
            {
                return true;
            }
            else if( sum > k)
            {
                j=it.before();
            }
            else
            {
                i=it.next();
            }
        }
        return false;
    }
};
//using vector
class Solution {
public:
    void inorderTraversal(TreeNode*root,vector<int>&inorder)
    {
        if(!root)
        return;

        inorderTraversal(root->left,inorder);
        inorder.push_back(root->val);
        inorderTraversal(root->right,inorder);

    }

    bool findSum(TreeNode*root,vector<int>arr,int k)
    {
        int start=0;
        int end=arr.size()-1;
        while(start<end)
        {
            int sum=arr[start]+arr[end];
            if(k==sum)
            {
                return true;
            }
            else if(sum<k)
            {
                start++;
            }
            else
            {
                end--;
            }
        }
        return false;
    }
    bool findTarget(TreeNode* root, int k) {
        vector<int>inorder;
        inorderTraversal(root,inorder);
        bool ans=findSum(root,inorder,k);
        return ans;
    }
};
