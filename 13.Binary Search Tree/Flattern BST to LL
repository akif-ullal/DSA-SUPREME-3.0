#include <iostream>
using namespace std;

// Define the structure for a node
struct Node {
    int data;
    Node* left;
    Node* right;

    // Constructor
    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};

// Insert a node into the BST
Node* insert(Node* root, int val) {
    if (root == nullptr) {
        return new Node(val);
    }

    if (val < root->data) {
        root->left = insert(root->left, val);
    } else if (val > root->data) {
        root->right = insert(root->right, val);
    }
    // Duplicate values are not inserted
    return root;
}


// In-order traversal (Left, Root, Right)
void inorder(Node* root) {
    if (root == nullptr) return;

    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void flatternBST(Node*root,Node*&pred)
{
  if(!root)
    return;
  flatternBST(root->left,pred);
  pred->right=root;
  root->left=NULL;
  pred=root;
  flatternBST(root->right,pred);
}
void printLL(Node* newroot)
{
  Node*temp=newroot;

  while(temp)
    {
      cout<<temp->data<<" ";
      temp=temp->right;
    }
}
// Driver code
int main() {
    Node* root = nullptr;

    // Insert elements
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 70);
    insert(root, 20);
    insert(root, 40);
    insert(root, 60);
    insert(root, 80);

    // In-order Traversal
    cout << "In-order traversal: ";
    inorder(root);
    cout << endl;
    Node*dummy=new Node(-1);
    Node*pred=dummy;
    flatternBST(root,pred);
    printLL(dummy->right);

    return 0;
}
