class Solution {
public:

    void inorderTraversal(vector<int>&inorder,TreeNode*root)
    {
        if(!root)
        return;

        inorderTraversal(inorder,root->left);
        inorder.push_back(root->val);
        inorderTraversal(inorder,root->right);
    }

    TreeNode* createbalanceBST(vector<int>&inorder,int s,int e)
    {
        if(s>e)
        {
            return NULL;
        }
        int mid=(s+e)>>1;
        TreeNode*root=new TreeNode(inorder[mid]);
        root->left=createbalanceBST(inorder,s,mid-1);
        root->right=createbalanceBST(inorder,mid+1,e);
        return root;
    }
    TreeNode* balanceBST(TreeNode* root) {
        vector<int>inorder;
        inorderTraversal(inorder,root);
        int s=0;
        int e=inorder.size()-1;
        
        TreeNode*Newroot=createbalanceBST(inorder,s,e);
        return Newroot;

    }
};
