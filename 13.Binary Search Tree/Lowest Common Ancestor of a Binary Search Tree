class Solution {
public:

    TreeNode* findlowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q)
    {
        if(!root)
        return NULL;

        if(p->val < root->val && q->val < root->val)
        {
            if(p->val == root->val)
            {
                return p;
            }
            else if(q->val==root->val)
            {
                return q;
            }
            TreeNode* ls=findlowestCommonAncestor(root->left,p,q);
            return ls;
        }
        else if(p->val > root->val && q->val > root->val)
        {
            if(p->val == root->val)
            {
                return p;
            }
            else if(q->val==root->val)
            {
                return q;
            }
            TreeNode* rs=findlowestCommonAncestor(root->right,p,q);
            return rs;
        }
        return root;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        TreeNode* ans=findlowestCommonAncestor(root,p,q);
        return ans;
    }
};
