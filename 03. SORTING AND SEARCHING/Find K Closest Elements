class Solution {
public:
    // vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        //two pointer approach
        // int n=arr.size();
        // int i=0;
        // int j=n-1;
        // while(j-i>=k)
        // {
        //     if(x-arr[i]>arr[j]-x)
        //     {
        //         i++;
        //     }else
        //     {
        //         j--;
        //     }
        // }
        // return vector<int>(arr.begin()+i,arr.begin()+j+1);

        //binary search
        int lowerbound(vector<int>& arr,int x)
        {
            int n=arr.size();
            int s=0;
            int e=n-1;
            int ans=e;
            while(s<=e)
            {
                int mid=s+(e-s)/2;
                if(arr[mid]>=x)
                {
                    ans=mid;
                    e=mid-1;
                }else if(arr[mid]<x)
                {
                    s=mid+1;
                }
                else{
                    e=mid-1;
                }
            }
            return ans;
        }
        vector<int> findClosestElements(vector<int>& arr, int k, int x){

            int h=lowerbound(arr,x);
            int l=h-1;
            int n=arr.size();
            cout<<" lowerbound: "<<h<<endl;
            while(k--)
            {
                if(l<0)
                {
                    h++;
                }
                else if(h>=n)
                {
                    l--;
                }
                else if(arr[h]-x<x-arr[l])
                {
                    h++;
                }else
                {
                    l--;
                }
            }
            return vector<int>(arr.begin()+l+1,arr.begin()+h);
    }
};
