class Solution {
public:
bool possiblesolution(vector<int>& bloomDay, int m, int k,int mid)
{
    int c=0;
        for(int i=0;i<bloomDay.size();i++)
        {
           if(bloomDay[i]<=mid)
           {
            c++;
           }

            if(c==k)
            {
                m--;
                c=0;
                if(m==0)
                {
                    break;
                }
            }
            if(bloomDay[i]>mid)
            {
                c=0;
            }
            

           }
            if(m==0)
            {
                return 1;
            }
            return 0;
}
    int minDays(vector<int>& bloomDay, long long int m, long long int k) {

        if(bloomDay.size()<m*k)
        {
            return -1;
        }

        int s=*min_element(bloomDay.begin(),bloomDay.end());
        int e=*max_element(bloomDay.begin(),bloomDay.end());
        int ans=-1;
         while(s<=e)
         {
            int mid=s+(e-s)/2;
            if(possiblesolution(bloomDay,m,k,mid))
            {
                ans=mid;
                e=mid-1;
            }
            else{
                s=mid+1;
            }
         }  
         return ans;
    }
};
