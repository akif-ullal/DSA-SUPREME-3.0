class Solution {
public:
    //using binarysearch
    // int missingNumber(vector<int>& nums) {
    //     int n=nums.size();
    //     sort(nums.begin(),nums.end());
    //     int s=0;
    //     int e=n-1;
    //     int mid=s+(e-s)/2;
    //     int ans=-1;
    //     while(s<=e)
    //     {
    //         if((nums[mid]-mid)==0)
    //         {
    //             s=mid+1;
    //         }
    //         else if((nums[mid]-mid)==1)
    //         {
    //             ans=mid;
    //             e=mid-1;
    //         }
    //         mid=s+(e-s)/2;

    //         cout<<ans<<" ";
            
    //     }
        
    //     if(ans==-1)
    //     {
    //         return n;
    //     }
    //     return ans;
    // }
    
    //using xor approach
    int missingNumber(vector<int>& arr) {
        
    int ans=0;
    int n=arr.size();
    for(int i=0;i<n;i++)
    {
        ans=ans^arr[i];
    }
     for(int i=0;i<=n;i++)
    {
        ans=ans^i;
    }
    return ans;
    }

};
