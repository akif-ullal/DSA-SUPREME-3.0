class Solution {
public:
   

        //using two pointer approach
        // int n=nums.size();
        // set<pair<int,int>>ans;
        // sort(nums.begin(),nums.end());
        // int i=0;
        // int j=1;
       
      
        // while(j<n && i<n)
        // {
        //     if(nums[j]-nums[i]==k)
        //     {
        //         ans.insert({nums[i],nums[j]});
        //         i++;
        //         j++;
        //     }
        //     else if(nums[j]-nums[i]>k)
        //     {
        //         i++;
        //     }else{
        //         j++;
        //     }
        //     if(i==j)
        //     {
        //         j++;
        //     }
        // }
        // return ans.size();
        
        //using binarysearch approach
        int binarysearch(int s,int e,int x ,vector<int>&nums)
        {
            int mid=s+(e-s)/2;
            while(s<=e)
            {
                if(nums[mid]==x)
                {
                    return mid;
                }
                else if(x<nums[mid])
                {
                    e=mid-1;
                }
                else{
                    s=mid+1;
                }
                mid=s+(e-s);
            }
            return -1;
        }

     int findPairs(vector<int>& nums, int k) {

        int n=nums.size();
        sort(nums.begin(),nums.end());
        set<pair<int,int>>ans;
        for(int i=0;i<n;i++)
        {
            if(binarysearch(i+1,n-1,nums[i]+k,nums)!=-1)
            {
                ans.insert({nums[i],nums[i]+k});
            }

        }
          return ans.size();
    }
};
