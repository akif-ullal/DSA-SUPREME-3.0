
class Solution {
public:
    int getpivot(vector<int>& arr)
    {
        int n=arr.size();
        int s=0;
        int e=n-1;
        int mid=s+(e-s)/2;
     
        while(s<=e)
        {
            if(s==e)
            {
                return s;
            }
            if(mid+1<n && arr[mid]>arr[mid+1])
            {
                return mid;
            }
           if(arr[s]>arr[mid])
            {
                e=mid-1;
            }
            else if(arr[s]<=arr[mid]){
                s=mid+1;
            }
            mid=s+(e-s)/2;
        }
        return -1;
        
    }
     int binarysearch( vector<int> &arr,int s,int e,int target)
    {
        
        int mid=s+(e-s)/2;
        while(s<=e)
        {
            if(arr[mid]==target)
            {
                return mid;
            }else if(arr[mid]<target)
            {
                s=mid+1;
            }else if(arr[mid]>target)
            {
                e=mid-1;
            }
            mid=s+(e-s)/2;
        }
        return -1;
    }
    

    int search(vector<int>& nums, int target) {
        int n=nums.size();
        
        int pivot=getpivot(nums);
        
        cout<<pivot;
        int ans=0;
       
        if(target>=nums[0] && target<=nums[pivot])
        {
            ans=binarysearch(nums,0,pivot,target);
            return ans;
        }else  if (pivot + 1 < n && target >= nums[pivot + 1] && target <= nums[n - 1]) 
        {
             ans=binarysearch(nums,pivot+1,n-1,target);
             return ans;
        }

        return -1;
    }
    
};
