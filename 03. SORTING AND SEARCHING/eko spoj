#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;
bool ispossible(vector<long long int>tree,long long int m,long long int mid)
{
  long long int woodcut=0;
  for(long long int i=0;i<tree.size();i++)
  {
    if(tree[i]>mid)
    {
      woodcut=woodcut+(tree[i]-mid);
    }
   
  }
  if(woodcut>=m)
  {
    return true;
  }
  else{
    return false;
  }
}
long long int maxSawBladeHeight(vector<long long int>tree,long long int m)
{
  long long int s=0;
  long long int e=*max_element(tree.begin(),tree.end());
  long long int ans=-1;
  while(s<=e)
  {
    long long int mid=s+(e-s)/2;
    if(ispossible(tree,m,mid))
    {
      ans=mid;
      s=mid+1;
    }
    else{
      e=mid-1;
    }
  }
  return ans;

}

int main() {
 long long int n,m;
 cin>>n>>m;
 vector<long long int>tree;

 while(n--)
 {
  long long int height;
  cin>>height;
  tree.push_back(height);

 }
 cout<<maxSawBladeHeight(tree,m)<<endl;
 

  return 0;
}
