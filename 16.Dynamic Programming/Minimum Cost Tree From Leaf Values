class Solution {
public:

    int solveUsingRec(vector<int>&arr,map<pair<int,int>,int>&mapp,int s,int e)
    {
        if(s>=e)
        return 0;
        
        int ans=INT_MAX;
        for(int i=s;i<e;i++)
        {
            int leftRangeMax = mapp[{s,i}];
            int rightRangeMax = mapp[{i+1,e}];
            int NoLeafNode = leftRangeMax * rightRangeMax;
            ans = min(ans,NoLeafNode + solveUsingRec(arr,mapp,s,i)+ solveUsingRec(arr,mapp,i+1,e));

        }
        return ans;
    }

    int solveUsingMem(vector<int>&arr,map<pair<int,int>,int>&mapp,int s,int e,vector<vector<int>>&dp)
    {
        if(s>=e)
        return 0;
        
        if(dp[s][e]!=-1)
        {
            return dp[s][e];
        }

        int ans=INT_MAX;
        for(int i=s;i<e;i++)
        {
            int leftRangeMax = mapp[{s,i}];
            int rightRangeMax = mapp[{i+1,e}];
            int NoLeafNode = leftRangeMax * rightRangeMax;
            ans = min(ans,NoLeafNode + solveUsingMem(arr,mapp,s,i,dp)+ solveUsingMem(arr,mapp,i+1,e,dp));

        }
        dp[s][e]=ans;
        return dp[s][e];
    }

    int solveUsingTab(vector<int>&arr,map<pair<int,int>,int>&mapp)
    {
        int n=arr.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,0));

        for(int s=n-1;s>=0;s--)
        {
            for(int e=0;e<n;e++)
            {
                if(s>=e)
                {
                    continue;
                }
                else
                {
                    int ans=INT_MAX;
                    for(int i=s;i<e;i++)
                    {
                        int leftRangeMax = mapp[{s,i}];
                        int rightRangeMax = mapp[{i+1,e}];
                        int NoLeafNode = leftRangeMax * rightRangeMax;
                        ans = min(ans,NoLeafNode + dp[s][i]+ dp[i+1][e]);

                    }
                    dp[s][e]=ans;
                }
            }
        }
        return dp[0][n-1];
    }
    int mctFromLeafValues(vector<int>& arr) {
        map<pair<int,int>,int>mapp;

        int n=arr.size();
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                if(i==j)
                {
                    mapp[{i,j}]=arr[j];
                }
                else
                {
                    mapp[{i,j}]=max(mapp[{i,j-1}],arr[j]);
                }
            }
        }

        //vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        int ans=solveUsingTab(arr,mapp);
        return ans;
    }
};
