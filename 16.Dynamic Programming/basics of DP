class Solution {
public:

    int recursiveAppraoch(int n)
    {
        if(n==0)
        return 0;

        if(n==1)
        return 1;

        int ans=recursiveAppraoch(n-1)+recursiveAppraoch(n-2);
        return ans;
    }

    int topDownApproach(int n,vector<int>&dp)
    {
        if(n==0)
        return 0;

        if(n==1)
        return 1;

        if(dp[n]!=-1)
        {
            return dp[n];
        }

        dp[n]=topDownApproach(n-1,dp)+topDownApproach(n-2,dp);
        return dp[n];
    }

    int bottomUpApproach(int n,vector<int>&dp)
    {
        if(n==0)
        return 0;

        if(n==1)
        return 1;

       for(int i=2;i<=n;i++)
       {
        dp[i]=dp[i-1]+dp[i-2];

       }
       return dp[n];
    }

    int SpaceOptimzesofbottomUpApproach(int n,int prev,int curr)
    {
        if(n==0)
        return 0;

        if(n==1)
        return 1;

       for(int i=2;i<=n;i++)
       {
        int ans=prev+curr;
        prev=curr;
        curr=ans;

       }
       return curr;
    }
    int fib(int n) {
        //recusive approach
        // int ans=recursiveAppraoch(n);
        // return ans;

        //top down approach
        // vector<int>dp(n+1,-1);
        // if(n==0)
        // return 0;
        // dp[0]=0;
        // dp[1]=1;
        // int ans=topDownApproach(n,dp);
        // return ans;

        //bottom up approach
        // vector<int>dp(n+1,-1);
        // if(n==0)
        // return 0;
        // dp[0]=0;
        // dp[1]=1;
        // int ans=bottomUpApproach(n,dp);
        // return ans;

        //space optimize of bottom-up (if pattern found)
        if(n==0)
        return 0;
        int prev=0;
        int curr=1;
        int ans=SpaceOptimzesofbottomUpApproach(n,prev,curr);
        return ans;
    }
};
