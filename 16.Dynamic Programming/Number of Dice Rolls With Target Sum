class Solution {
public:

    int mod=1000000007;
    int solveUsingRec(int n, int k, int target)
    {
        if(n==0 && target==0)
        return 1;
        if(target==0 && n!=0)
        return 0;
        if(n==0 && target!=0)
        return 0;
        
        int ans=0;
        for(int i=1;i<=k;i++)
        {
            ans=(ans+(solveUsingRec(n-1,k,target-i)%mod)%mod);
        }
        return ans;
    }

    int solveUsingMem(int n, int k, int target,vector<vector<int>>&dp)
    {
        if(n==0 && target==0)
        return 1;
        if(target==0 && n!=0)
        return 0;
        if(n==0 && target!=0)
        return 0;

        if(dp[n][target]!=-1)
        return dp[n][target];
        
        int ans=0;
        for(int i=1;i<=k;i++)
        {
            if(target-i>=0)
            {
            ans=(ans+solveUsingMem(n-1,k,target-i,dp))%mod;
            dp[n][target]=ans;
            }
        }
        return dp[n][target];
    }

    int solveUsingTab(int n,int k,int target)
    {
        vector<vector<int>>dp(n+1,vector<int>(target+1,0));

        dp[0][0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int t=1;t<=target;t++)
            {
                int ans=0;
                for(int ind=1;ind<=k;ind++)
                {
                    if(t-ind>=0)
                    {
                    ans=(ans+dp[i-1][t-ind])%mod;
                    }
                }
                dp[i][t]=ans;
            }
        }
        return dp[n][target];
    }

    int solveUsingTabSO(int n,int k,int target)
    {
        //vector<vector<int>>dp(n+1,vector<int>(target+1,0));

        vector<int>curr(target+1,0);
        vector<int>prev(target+1,0);
        
        prev[0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int t=1;t<=target;t++)
            {
                int ans=0;
                for(int ind=1;ind<=k;ind++)
                {
                    if(t-ind>=0)
                    {
                    ans=(ans+prev[t-ind])%mod;
                    }
                }
                curr[t]=ans;
            }
            prev=curr;
        }
        return prev[target];
    }

    int solveUsingTabSO2(int n,int k,int target)
    {
        //vector<vector<int>>dp(n+1,vector<int>(target+1,0));

        vector<int>curr(target+1,0);
        
        curr[0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int t=target;t>=0;t++)
            {
                int ans=0;
                for(int ind=1;ind<=k;ind++)
                {
                    if(t-ind>=0)
                    {
                    ans=(ans+curr[t-ind])%mod;
                    }
                }
                curr[t]=ans;
            }
        }
        return curr[target];
    }
    int numRollsToTarget(int n, int k, int target) {
        // int ans=solveUsingRec(n,k,target);
        vector<vector<int>>dp(n+1,vector<int>(target+1,-1));

        // int ans=solveUsingMem(n,k,target,dp);
        int ans=solveUsingTabSO(n,k,target);
        return ans;
    }
};
