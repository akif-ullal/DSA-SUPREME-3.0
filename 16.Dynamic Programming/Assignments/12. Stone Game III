class Solution {
public:

    int solveRec(vector<int>&sv,int i)
    {
        if(i>=sv.size())
        return 0;

        int ans=INT_MIN;
        int total=0;

        for(int x=1;x<=3;x++)
        {
            if(i+x-1 >= sv.size())
            break;
            total+=sv[i+x-1];

            ans=max(ans,total-solveRec(sv,i+x));

        }
        return ans;
    }

    int solveMem(vector<int>&sv,int i,vector<int>&dp)
    {
        if(i>=sv.size())
        return 0;

        if(dp[i]!=-1)
        return dp[i];

        int ans=INT_MIN;
        int total=0;

        for(int x=1;x<=3;x++)
        {
            if(i+x-1 >= sv.size())
            break;
            total+=sv[i+x-1];

            ans=max(ans,total-solveMem(sv,i+x,dp));

        }
        return dp[i]=ans;
    }

    int solveTab(vector<int>& sv)
    {
        int n=sv.size();
        vector<int>dp(n+1,0);

        for(int i=n-1;i>=0;i++)
        {
            int ans=INT_MIN;
            int total=0;

            for(int x=1;x<=3;x++)
            {
                if(i+x-1 >= sv.size())
                break;
                total+=sv[i+x-1];

                ans=max(ans,total-dp[i+x]);

            }
             dp[i]=ans;
        }
        return dp[0];
    }

    string stoneGameIII(vector<int>& stoneValue) {
        int n=stoneValue.size();
        vector<int>dp(n+1,-1);
        int ans=solveMem(stoneValue,0,dp);

        if(ans > 0)
        return "Alice";

        if(ans < 0)
        return "Bob";

        return "Tie";
    }
};
