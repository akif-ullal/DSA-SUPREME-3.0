class Solution {
public:

    int solveRec(vector<int>& prices,int i,int buy,int k)
    {
        if(i==prices.size())
        return 0;

        if(k==0)
        return 0;

        int profit=0;
        if(buy)
        {
            int profitBuyingTime = -prices[i]+solveRec(prices,i+1,0,k);
            int BuyingSkippd = solveRec(prices,i+1,1,k);
            profit=max(profitBuyingTime,BuyingSkippd);
        }
        else
        {
            int profitSellingTime = prices[i]+solveRec(prices,i+1,1,k-1);
            int SellingSkipped = solveRec(prices,i+1,0,k);
            profit=max(profitSellingTime,SellingSkipped);
        }
        return profit;
    }

    int solveMem(vector<int>& prices,int i,int buy,int k,vector<vector<vector<int>>>&dp)
    {
        if(i==prices.size())
        return 0;

        if(k==0)
        return 0;

        if(dp[i][buy][k]!=-1)
        return dp[i][buy][k];

        int profit=0;
        if(buy)
        {
            int profitBuyingTime = -prices[i]+solveMem(prices,i+1,0,k,dp);
            int BuyingSkippd = solveMem(prices,i+1,1,k,dp);
            profit=max(profitBuyingTime,BuyingSkippd);
        }
        else
        {
            int profitSellingTime = prices[i]+solveMem(prices,i+1,1,k-1,dp);
            int SellingSkipped = solveMem(prices,i+1,0,k,dp);
            profit=max(profitSellingTime,SellingSkipped);
        }
        return dp[i][buy][k]=profit;
    }

    int solveTab(vector<int>&prices,int limit)
    {
        int n=prices.size();
        vector<vector<vector<int>>>dp(prices.size()+1,vector<vector<int>>(2,vector<int>(limit+1,0)));

        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<2;buy++)
            {
                for(int k=1;k<=limit;k++)
                {
                    int profit=0;
                    if(buy)
                    {
                        int profitBuyingTime = -prices[i]+dp[i+1][0][k];
                        int BuyingSkippd = dp[i+1][1][k];
                        profit=max(profitBuyingTime,BuyingSkippd);
                    }
                    else
                    {
                        int profitSellingTime = prices[i]+dp[i+1][1][k-1];
                        int SellingSkipped = dp[i+1][0][k];
                        profit=max(profitSellingTime,SellingSkipped);
                    }
                    dp[i][buy][k]=profit;
                }
            }
        }
        return dp[0][true][limit];
    }

    int solveTabSO(vector<int>&prices,int limit)
    {
        int n=prices.size();
        //vector<vector<vector<int>>>dp(prices.size()+1,vector<vector<int>>(2,vector<int>(limit+1,0)));

        vector<vector<int>>curr(2,vector<int>(limit+1,0));
        vector<vector<int>>prev(2,vector<int>(limit+1,0));
        for(int i=n-1;i>=0;i--)
        {
            for(int buy=0;buy<2;buy++)
            {
                for(int k=1;k<=limit;k++)
                {
                    int profit=0;
                    if(buy)
                    {
                        int profitBuyingTime = -prices[i]+prev[0][k];
                        int BuyingSkippd =prev[1][k];
                        profit=max(profitBuyingTime,BuyingSkippd);
                    }
                    else
                    {
                        int profitSellingTime = prices[i]+prev[1][k-1];
                        int SellingSkipped = prev[0][k];
                        profit=max(profitSellingTime,SellingSkipped);
                    }
                    curr[buy][k]=profit;
                }
            }
            prev=curr;
        }
        return prev[true][limit];
    }
    int maxProfit(int k, vector<int>& prices) {
        vector<vector<vector<int>>>dp(prices.size()+1,vector<vector<int>>(2,vector<int>(k+1,-1)));
        //int ans=solveMem(prices,0,true,k,dp);
        int ans=solveTabSO(prices,k);
        return ans;
    }
};
