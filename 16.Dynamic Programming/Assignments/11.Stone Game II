class Solution {
public:

    int solveRec(vector<int>& piles,int i,int m,bool alice)
    {
        if(i==piles.size())
        return 0;

        int ans = alice==true ? INT_MIN : INT_MAX;
        int total=0;

        for(int x=1;x<=2*m;x++)
        {
            if(i+x-1 >= piles.size())
            break;

            total+=piles[i+x-1];

            if(alice)
            {
                ans=max(ans,total+solveRec(piles,i+x,max(x,m),!alice));
            }
            else
            {
                ans=min(ans,solveRec(piles,i+x,max(x,m),!alice));
            }
        }
        return ans;
    }

    int solveMem(vector<int>& piles,int i,int m,bool alice,vector<vector<vector<int>>>&dp)
    {
        if(i==piles.size())
        return 0;

        if(dp[i][m][alice]!=-1)
        return dp[i][m][alice];

        int ans = alice==true ? INT_MIN : INT_MAX;
        int total=0;

        for(int x=1;x<=2*m;x++)
        {
            if(i+x-1 >= piles.size())
            break;

            total+=piles[i+x-1];

            if(alice)
            {
                ans=max(ans,total+solveMem(piles,i+x,max(x,m),!alice,dp));
            }
            else
            {
                ans=min(ans,solveMem(piles,i+x,max(x,m),!alice,dp));
            }
        }
        return dp[i][m][alice]=ans;

    }

    int solveTab(vector<int>& piles)
    {
        int n=piles.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(n+1,vector<int>(2,0)));

        for(int i=n-1;i>=0;i--)
        {
            for(int m=n;m>=1;m--)
            {
                for(int alice=0;alice<=1;alice++)
                {
                    int ans = alice==true ? INT_MIN : INT_MAX;
                    int total=0;

                    for(int x=1;x<=2*m;x++)
                    {
                        if(i+x-1 >= piles.size())
                        break;

                        total+=piles[i+x-1];

                        if(alice)
                        {
                            ans=max(ans,total+dp[i+x][max(x,m)][!alice]);
                        }
                        else
                        {
                            ans=min(ans,dp[i+x][max(x,m)][!alice]);
                        }
                    }
                     dp[i][m][alice]=ans;

                }
            }
        }
        return dp[0][1][1];

    }
    int stoneGameII(vector<int>& piles) {
        // int n=piles.size();
        // vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(n+1,vector<int>(2,-1)));
        // int ans=solveMem(piles,0,1,true,dp);

        int ans=solveTab(piles);
        return ans;
    }
};
