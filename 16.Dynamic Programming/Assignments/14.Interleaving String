class Solution {
public:

    bool solveRec(string &s1, string &s2, string &s3,int i,int j,int k)
    {
        if(i==s1.size() && j==s2.size() && k==s3.size())
        {
            return true;
        }

        bool flag = false;

        if(k<s3.size() && s1[i]==s3[k])
        {
            flag=flag || solveRec(s1,s2,s3,i+1,j,k+1);
        }

        if(k<s3.size() && s2[j]==s3[k])
        {
            flag=flag||solveRec(s1,s2,s3,i,j+1,k+1);
        }

        return flag;
    }

    bool solveMem(string &s1, string &s2, string &s3,int i,int j,int k,vector<vector<vector<int>>>&dp)
    {
        if(i==s1.size() && j==s2.size() && k==s3.size())
        {
            return true;
        }

        if(dp[i][j][k]!=-1)
        {
            return dp[i][j][k];
        }

        bool flag = false;

        if(k<s3.size() && s1[i]==s3[k])
        {
            flag=flag || solveMem(s1,s2,s3,i+1,j,k+1,dp);
        }

        if(k<s3.size() && s2[j]==s3[k])
        {
            flag=flag||solveMem(s1,s2,s3,i,j+1,k+1,dp);
        }

        return dp[i][j][k]=flag;
    }

    bool solveTab(string &s1, string &s2, string &s3)
    {
        int n1=s1.size();
        int n2=s2.size();
        int n3=s3.size();
        vector<vector<vector<int>>>dp(n1+1,vector<vector<int>>(n2+1,vector<int>(n3+1,0)));
        dp[n1][n2][n3]=true;

        for(int i=n1;i>=0;i--)
        {
            for(int j=n2;j>=0;j--)
            {
                for(int k=n3;k>=0;k--)
                {
                    if(i==s1.size() && j==s2.size() && k==s3.size())
                    {
                        continue;
                    }
                    bool flag = false;

                    if(k<s3.size() && s1[i]==s3[k])
                    {
                        flag=flag || dp[i+1][j][k+1];
                    }

                    if(k<s3.size() && s2[j]==s3[k])
                    {
                        flag=flag||dp[i][j+1][k+1];
                    }

                    dp[i][j][k]=flag;
                }
            }
        }
        return dp[0][0][0];

    }
    bool isInterleave(string s1, string s2, string s3) {
        int n1=s1.size();
        int n2=s2.size();
        int n3=s3.size();
        vector<vector<vector<int>>>dp(n1+1,vector<vector<int>>(n2+1,vector<int>(n3+1,-1)));
        bool ans = solveTab(s1,s2,s3);
        return ans;
    }
};
