class Solution {
public:

    int solveTabSO(string&s)
    {
        int n=s.size();
        
        vector<int>curr(n+1);
        vector<int>prev(n+1);


        for(int i=n-1;i>=0;i--)
        {
            curr[i]=1;
            for(int j=i+1;j<n;j++)
            {
                int ans=0;
                if(s[i]==s[j])
                {
                    ans=2+prev[j-1];
                }
                else
                {
                    ans=max(prev[j],curr[j-1]);

                }
                 curr[j]=ans;
            }
            prev=curr;
        }
        return prev[n-1];
    }

    
    int longestPalindromeSubseq(string &s) {
        int ans=solveTabSO(s);
        return ans;
    }
    int minInsertions(string s) {
        int n=s.size();
        int LPS=longestPalindromeSubseq(s);
        int MISMP=n-LPS;
        return MISMP;
    }
};
