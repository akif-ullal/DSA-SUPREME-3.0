class Solution {
public:

    #define INF (1e9+1)
    int solveRec(vector<int>& arr1, vector<int>& arr2,int prev,int i)
    {
        if(i==arr1.size())
        return 0;

        int opt1=INF;

        if(prev < arr1[i])
        {
            opt1=solveRec(arr1,arr2,arr1[i],i+1);
        }

        auto it=upper_bound(arr2.begin(),arr2.end(),prev);
        int opt2=INF;
        if(it!=arr2.end())
        {
            int index=it-arr2.begin();
            opt2=1+solveRec(arr1,arr2,arr2[index],i+1);
        }
        return min(opt1,opt2);
    }
    map<pair<int,int>,int>dp;
    int solveMem(vector<int>& arr1, vector<int>& arr2,int prev,int i)
    {
        if(i==arr1.size())
        return 0;

        if(dp.find({prev,i})!=dp.end())
        {
            return dp[{prev,i}];
        }

        int opt1=INF;

        if(prev < arr1[i])
        {
            opt1=solveMem(arr1,arr2,arr1[i],i+1);
        }

        auto it=upper_bound(arr2.begin(),arr2.end(),prev);
        int opt2=INF;
        if(it!=arr2.end())
        {
            int index=it-arr2.begin();
            opt2=1+solveMem(arr1,arr2,arr2[index],i+1);
        }
        return dp[{prev,i}]=min(opt1,opt2);
    }
    int makeArrayIncreasing(vector<int>& arr1, vector<int>& arr2) {
        sort(arr2.begin(),arr2.end());
        int ans=solveMem(arr1,arr2,-1,0);
        
        ans= ans==INF ? -1 : ans;
        return ans;
    }
};
