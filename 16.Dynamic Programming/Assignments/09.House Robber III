/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int solveRec(TreeNode* root)
    {
        if(root==NULL)
        return 0;

        int robTheHouse=0;
        int doNotRobTheHouse=0;

        robTheHouse+=root->val;
        if(root->left)
        {
            robTheHouse+=solveRec(root->left->left)+solveRec(root->left->right);
        }

        if(root->right)
        {
            robTheHouse+=solveRec(root->right->left)+solveRec(root->right->right);
        }

        doNotRobTheHouse=solveRec(root->left)+solveRec(root->right);
        
        return max(robTheHouse,doNotRobTheHouse);

    }

    unordered_map<TreeNode*,int>dp;
    int solveMem(TreeNode* root)
    {
        if(root==NULL)
        return 0;

        if(dp.find(root)!=dp.end())
        return dp[root];

        int robTheHouse=0;
        int doNotRobTheHouse=0;

        robTheHouse+=root->val;
        if(root->left)
        {
            robTheHouse+=solveMem(root->left->left)+solveMem(root->left->right);
        }

        if(root->right)
        {
            robTheHouse+=solveMem(root->right->left)+solveMem(root->right->right);
        }

        doNotRobTheHouse=solveMem(root->left)+solveMem(root->right);
        
        return dp[root] = max(robTheHouse,doNotRobTheHouse);

    }

    int rob(TreeNode* root) {
        int ans=solveMem(root);
        return ans;
    }
};
