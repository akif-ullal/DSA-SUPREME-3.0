class Solution {
public:

    vector<TreeNode*>solveRec(int start,int end)
    {
        if(start > end)
        {
            return {NULL};
        }

        vector<TreeNode*>ans;
        if(start == end)
        {
            return {new TreeNode(start)};
        }

        for(int i=start;i<=end;i++)
        {
            vector<TreeNode*>left=solveRec(start,i-1);
            vector<TreeNode*>right=solveRec(i+1,end);

            for(int j=0;j<left.size();j++)
            {
                for(int k=0;k<right.size();k++)
                {
                    TreeNode*root=new TreeNode(i);
                    root->left=left[j];
                    root->right=right[k];
                    ans.push_back(root);
                }
            }
        }
        return ans;
    }

    map<pair<int,int>,vector<TreeNode*>>dp;
    vector<TreeNode*>solveMem(int start,int end)
    {
        if(start > end)
        {
            return {NULL};
        }

        if(start == end)
        {
            return {new TreeNode(start)};
        }

        if(dp.find({start,end})!=dp.end())
        {
            return dp[{start,end}];
        }

        vector<TreeNode*>ans;

        for(int i=start;i<=end;i++)
        {
            vector<TreeNode*>left=solveMem(start,i-1);
            vector<TreeNode*>right=solveMem(i+1,end);

            for(int j=0;j<left.size();j++)
            {
                for(int k=0;k<right.size();k++)
                {
                    TreeNode*root=new TreeNode(i);
                    root->left=left[j];
                    root->right=right[k];
                    ans.push_back(root);
                }
            }
        }
        dp[{start,end}] = ans;

        return dp[{start,end}];
    }
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*>ans=solveMem(1,n);
        return ans;
    }
};
