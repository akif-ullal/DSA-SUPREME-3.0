class Solution {
public:

    int solveRec(string&s,int i,int j)
    {
        if(i>j)
        return 0;

        if(i==j)
        return 1;

        int ans=0;
        if(s[i]==s[j])
        {
            ans=2+solveRec(s,i+1,j-1);
        }
        else
        {
            ans=max(solveRec(s,i+1,j),solveRec(s,i,j-1));

        }
        return ans;
    }

    int solveMem(string&s,int i,int j,vector<vector<int>>&dp)
    {
        if(i>j)
        return 0;

        if(i==j)
        return 1;

        if(dp[i][j]!=-1)
        return dp[i][j];

        int ans=0;
        if(s[i]==s[j])
        {
            ans=2+solveMem(s,i+1,j-1,dp);
        }
        else
        {
            ans=max(solveMem(s,i+1,j,dp),solveMem(s,i,j-1,dp));

        }
        return dp[i][j]=ans;
    }

    int solveTab(string&s)
    {
        int n=s.size();
        vector<vector<int>>dp(n+1,vector(n+1,0));

        for(int i=0;i<n;i++)
        {
            dp[i][i]=1;

        }

        for(int i=n-1;i>=0;i--)
        {
            for(int j=i+1;j<n;j++)
            {
                int ans=0;
                if(s[i]==s[j])
                {
                    ans=2+dp[i+1][j-1];
                }
                else
                {
                    ans=max(dp[i+1][j],dp[i][j-1]);

                }
                 dp[i][j]=ans;
            }
        }
        return dp[0][n-1];
    }
    
    int solveTabSO(string&s)
    {
        int n=s.size();
        
        vector<int>curr(n+1);
        vector<int>prev(n+1);


        for(int i=n-1;i>=0;i--)
        {
            curr[i]=1;
            for(int j=i+1;j<n;j++)
            {
                int ans=0;
                if(s[i]==s[j])
                {
                    ans=2+prev[j-1];
                }
                else
                {
                    ans=max(prev[j],curr[j-1]);

                }
                 curr[j]=ans;
            }
            prev=curr;
        }
        return prev[n-1];
    }

    
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        vector<vector<int>>dp(n+1,vector(n+1,-1));
        int ans=solveTabSO(s);
        return ans;
    }
};
