class Solution {
public:

    int solveRec(string &s1, string &s2,int i,int j)
    {
        int cost=0;

        if(i==s1.size() && j==s2.size())
        {
            return 0;
        }

        if(i==s1.size() && j!=s2.size())
        {
            for(int m=j;m<s2.size();m++)
            {
                cost+=s2[m];
            }
            return cost;
        }

        if(j==s2.size() && i!=s1.size())
        {
            for(int m=i;m<s1.size();m++)
            {
                cost+=s1[m];
            }
            return cost;
        }

        if(s1[i]==s2[j])
        {
            cost=solveRec(s1,s2,i+1,j+1);
        }
        else
        {
            int cost1=s1[i]+solveRec(s1,s2,i+1,j);
            int cost2=s2[j]+solveRec(s1,s2,i,j+1);
            cost=min(cost1,cost2);
        }
        return cost;

    }

     int solveMem(string &s1, string &s2,int i,int j,vector<vector<int>>&dp)
    {
        int cost=0;

        if(i==s1.size() && j==s2.size())
        {
            return 0;
        }

        if(i==s1.size() && j!=s2.size())
        {
            for(int m=j;m<s2.size();m++)
            {
                cost+=s2[m];
            }
            return cost;
        }

        if(j==s2.size() && i!=s1.size())
        {
            for(int m=i;m<s1.size();m++)
            {
                cost+=s1[m];
            }
            return cost;
        }

        if(dp[i][j]!=-1)
        return dp[i][j];
        
        if(s1[i]==s2[j])
        {
            cost=solveMem(s1,s2,i+1,j+1,dp);
        }
        else
        {
            int cost1=s1[i]+solveMem(s1,s2,i+1,j,dp);
            int cost2=s2[j]+solveMem(s1,s2,i,j+1,dp);
            cost=min(cost1,cost2);
        }
        dp[i][j]=cost;
        return dp[i][j];

    }

    int solveTab(string &s1, string &s2)
    {
        int n=s1.size();
        int m=s2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        int cost=0;
        for(int i=n-1;i>=0;i--)
        {
            dp[i][m]=s1[i]+dp[i+1][m];
        }

        for(int i=m-1;i>=0;i--)
        {
            dp[n][i]=s2[i]+dp[n][i+1];
        }

        for(int i=n-1;i>=0;i--)
        {
            for(int j=m-1;j>=0;j--)
            {
                if(s1[i]==s2[j])
                {
                    cost=dp[i+1][j+1];
                }
                else
                {
                    int cost1=s1[i]+dp[i+1][j];
                    int cost2=s2[j]+dp[i][j+1];
                    cost=min(cost1,cost2);
                }
                dp[i][j]=cost;
            }
        }
        return dp[0][0];

    }
    int minimumDeleteSum(string s1, string s2) {
        int n=s1.size();
        int m=s2.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        int ans=solveTab(s1,s2);
        return ans;
    }
};
