class Solution {
public:

    bool solveRec(string&s,string&p,int i,int j)
    {
        if(s.size()==i && p.size()==j)
        return true;

        if(j==p.size())
        return false;

        if(i==s.size() && j!=p.size())
        {
            for(int k=j;k<p.size();k++)
            {
                if(p[k]!='*')
                return false;
            }
            return true;
        }
        bool ans;
        if(s[i]==p[j] || p[j]=='?')
        {
            ans=solveRec(s,p,i+1,j+1);
        }
        else if(p[j]=='*')
        {
            ans=solveRec(s,p,i,j+1)||solveRec(s,p,i+1,j);
        }
        else
        {
            return false;
        }
        return ans;

    }

    bool solveMem(string&s,string&p,int i,int j,vector<vector<int>>&dp)
    {
        if(s.size()==i && p.size()==j)
        return true;

        if(j==p.size())
        return false;

        if(i==s.size() && j!=p.size())
        {
            for(int k=j;k<p.size();k++)
            {
                if(p[k]!='*')
                return false;
            }
            return true;
        }

        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        bool ans;
        if(s[i]==p[j] || p[j]=='?')
        {
            ans=solveMem(s,p,i+1,j+1,dp);
        }
        else if(p[j]=='*')
        {
            ans=solveMem(s,p,i,j+1,dp)||solveMem(s,p,i+1,j,dp);
        }
        else
        {
            ans = false;
        }
        dp[i][j]=ans;
        return dp[i][j];

    }

    bool solveTab(string &s,string&p)
    {
        int m=s.size();
        int n=p.size();
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
       
        dp[m][n]=1;

        for(int col=0;col<n;col++)
        {
            bool flag=true;
            for(int k=col;k<p.size();k++)
            {
                if(p[k]!='*')
                {
                 flag=false;
                break;
                }
            }
            dp[m][col]=flag;
        }

        for(int i=m-1;i>=0;i--)
        {
            for(int j=n;j>=0;j--)
            {
                bool ans;
                if(s[i]==p[j] || p[j]=='?')
                {
                    ans=dp[i+1][j+1];
                }
                else if(p[j]=='*')
                {
                    ans=dp[i][j+1]||dp[i+1][j];
                }
                else
                {
                    ans = false;
                }
                dp[i][j]=ans;
            }
        }
        return dp[0][0];
    }

    bool solveTabSO(string &s,string&p)
    {
        int m=s.size();
        int n=p.size();
        //vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        vector<int>next(n+1,0);
        vector<int>curr(n+1,0);
        next[n]=1;

        for(int col=0;col<n;col++)
        {
            bool flag=true;
            for(int k=col;k<p.size();k++)
            {
                if(p[k]!='*')
                {
                 flag=false;
                break;
                }
            }
            next[col]=flag;
        }

        for(int i=m-1;i>=0;i--)
        {
            for(int j=n;j>=0;j--)
            {
                bool ans;
                if(s[i]==p[j] || p[j]=='?')
                {
                    ans=next[j+1];
                }
                else if(p[j]=='*')
                {
                    ans=curr[j+1]||next[j];
                }
                else
                {
                    ans = false;
                }
                curr[j]=ans;
            }
            next=curr;
        }
        return next[0];
    }
    bool isMatch(string s, string p) {
        int m=s.size();
        int n=p.size();
        //vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
        bool ans=solveTabSO(s,p);
        return ans;
    }
};
