class Solution {
public:

    int recursionAns(vector<int>&coins,int amount)
    {
        if(amount==0)
        return 0;

        int minCoin=INT_MAX;
        for(int i=0;i<coins.size();i++)
        {
            if(amount>=coins[i])
            {
                int ans=recursionAns(coins,amount-coins[i]);

                if(ans!=INT_MAX)
                {
                    int finalAns=1+ans;
                    minCoin=min(finalAns,minCoin);
                }
            }
            
        }
        return minCoin;
    }

    int topDownAppr(vector<int>&coins,int amount,vector<int>&dp)
    {

        if(amount==0)
        return 0;

        int minCoin=INT_MAX;

        if(dp[amount]!=-1)
        {
            return dp[amount];
        }
        
        for(int i=0;i<coins.size();i++)
        {
            
            if(amount>=coins[i])
            {
                int ans=topDownAppr(coins,amount-coins[i],dp);

                if(ans!=INT_MAX)
                {
                    int finalAns=1+ans;
                    minCoin=min(finalAns,minCoin);
                }
            }
            
        }
        dp[amount]=minCoin;
        return dp[amount];
    }

    int bottomUpAppr(vector<int>&coins,int amount,vector<int>&dp)
    {
      dp[0]=0;
     
      for(int amt=1;amt<=amount;amt++)
      {
        int minCoin=INT_MAX;
        for(int i=0;i<coins.size();i++)
        {
            
            if(amt>=coins[i])
            {
                int ans=dp[amt-coins[i]];

                if(ans!=INT_MAX)
                {
                    int finalAns=1+ans;
                    minCoin=min(finalAns,minCoin);
                }
            }
            
        }
        dp[amt]=minCoin;
      }
      return dp[amount];
    }
    int coinChange(vector<int>& coins, int amount) {
        
        //int ans = recursionAns(coins,amount);
        int n=coins.size();
        vector<int>dp(amount+1,-1);
        //int ans=topDownAppr(coins,amount,dp);

        int ans=bottomUpAppr(coins,amount,dp);

        if(ans==INT_MAX)
        return -1;

        return ans;
    }
};
