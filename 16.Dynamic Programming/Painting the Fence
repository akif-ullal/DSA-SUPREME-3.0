class Solution {
  public:
  
    int solveUsingRec(int n, int k) {
        // code here
        if(n==1)
        return k;
        
        if(n==2)
        return k+k*(k-1);
        
        int ans=(k-1)*(countWays(n-1,k)+countWays(n-2,k));
        return ans;
    }
    
   int solveUsingMem(int n, int k,vector<int>&dp) {
    // code here
    if(n==1)
    return k;
    
    if(n==2)
    return k+k*(k-1);
    
    if(dp[n]!=-1)
    return dp[n];
    
    dp[n]=(k-1)*(solveUsingMem(n-1,k,dp)+solveUsingMem(n-2,k,dp));
    return dp[n];
    }
    
    int solveUsingTab(int n,int k)
    {
        if(n==1)
        return k;
        
        if(n==2)
        return k+k*(k-1);
        vector<int>dp(n+1,0);
        
        
        dp[1]=k;
        dp[2]=k+k*(k-1);
        
        for(int i=3;i<=n;i++)
        {
            dp[i]=(k-1)*(dp[i-1]+dp[i-2]);
        }
        return dp[n];
    }
    
      int solveUsingTabSO(int n,int k)
    {
        //vector<int>dp(n+1,0);
        
        // dp[1]=k;
        // dp[2]=k+k*(k-1);
        if(n==1)
        return k;
        
        if(n==2)
        return k+k*(k-1);
        int prev2=k+k*(k-1);
        int prev1=k;
        
        for(int i=3;i<=n;i++)
        {
            int ans=(k-1)*(prev2+prev1);
            prev1=prev2;
            prev2=ans;
        }
        return prev2;
    }
    
    int countWays(int n, int k) {
        // code here
        //return solveUsingRec(n,k);
        
        // vector<int>dp(n+1,-1);
        
        // int ans=solveUsingMem(n,k,dp);
        // return ans;
        
        int ans=solveUsingTabSO(n,k);
        return ans;
          
    }
};
