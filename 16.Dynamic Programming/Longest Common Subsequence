class Solution {
public:

    int solveUsingRec(string t1,string t2,int i,int j)
    {
        if(t1.size()<=i)
        return 0;

        if(t2.size()<=j)
        return 0;

        int ans=0;
        if(t1[i]==t2[j])
        {
            ans=1+solveUsingRec(t1,t2,i+1,j+1);
        }
        else
        {
            int ans1=0+solveUsingRec(t1,t2,i+1,j);
            int ans2=solveUsingRec(t1,t2,i,j+1);

            ans=max(ans1,ans2);
        }
        
        return ans;
    }

    int solveUsingMem(string &t1,string &t2,int i,int j,vector<vector<int>>&dp)
    {
        if(t1.size()<=i)
        return 0;

        if(t2.size()<=j)
        return 0;

        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int ans=0;
        if(t1[i]==t2[j])
        {
            ans=1+solveUsingMem(t1,t2,i+1,j+1,dp);
        }
        else
        {
            int ans1=0+solveUsingMem(t1,t2,i+1,j,dp);
            int ans2=solveUsingMem(t1,t2,i,j+1,dp);

            ans=max(ans1,ans2);
        }
        dp[i][j]=ans;
        return dp[i][j];
    }

    int solveUsingTab(string &t1,string &t2)
    {
       vector<vector<int>>dp(t1.size()+1,vector<int>(t2.size()+1,0));

       for(int i=t1.size()-1;i>=0;i--)
       {
        for(int j=t2.size()-1;j>=0;j--)
        {
            int ans=0;
            if(t1[i]==t2[j])
            {
                ans=1+dp[i+1][j+1];
            }
            else
            {
                int ans1=0+dp[i+1][j];
                int ans2=dp[i][j+1];

                ans=max(ans1,ans2);
            }
            dp[i][j]=ans;
        }
       }
       return dp[0][0];
    }

    int solveUsingTabSO(string &t1,string &t2)
    {
       //vector<vector<int>>dp(t1.size()+1,vector<int>(t2.size()+1,0));
       vector<int>curr(t2.size()+1,0);
       vector<int>prev(t2.size()+1,0);

       for(int i=t1.size()-1;i>=0;i--)
       {
        for(int j=t2.size()-1;j>=0;j--)
        {
            int ans=0;
            if(t1[i]==t2[j])
            {
                ans=1+prev[j+1];
            }
            else
            {
                int ans1=0+prev[j];
                int ans2=curr[j+1];

                ans=max(ans1,ans2);
            }
            curr[j]=ans;
        }
        prev=curr;
       }
       return prev[0];
    }

    int longestCommonSubsequence(string text1, string text2) {
        int i=0;
        int j=0;

        vector<vector<int>>dp(text1.size(),vector<int>(text2.size(),-1));
        int ans=solveUsingTabSO(text1,text2);
        return ans;
    }
};
