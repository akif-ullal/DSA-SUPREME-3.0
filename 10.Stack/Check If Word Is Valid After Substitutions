//using recursion T.C is o(n^2)
class Solution {
public:
    bool isValid(string s) {

        if(s.size()==0)
        {
            return true;
        }
        int find =s.find("abc");

        if(find!=string::npos)
        {
            string tr=s.substr(0,find);
            string tl=s.substr(find+3,s.size());
            return isValid(tr+tl);
        }

        return false;
    }
};
//using stack T.C o(n)
class Solution {
public:
    bool isValid(string s) {
        stack<char>st;
        if(s[0]!='a')
        return false;
        for(int i=0;i<s.size();i++)
        {
            char ch=s[i];
            if(ch=='a')
            {
                st.push(ch);
            }else if(ch=='b')
            {
                if(!st.empty() && st.top()=='a' )
                {
                    st.push('b');
                }else{
                    return false;
                }
                
            }
            else 
            {
                if(!st.empty() && st.top()=='b')
                {
                    st.pop();
                    if(!st.empty() && st.top()=='a')
                    {
                        st.pop();
                    }
                    else{
                        return false;
                    }
                }
                else{
                    return false;
                }
            }
        }

        if(st.size()==0)
        {
            return true;
        }
        else{
            return false;
        }
    }
};
