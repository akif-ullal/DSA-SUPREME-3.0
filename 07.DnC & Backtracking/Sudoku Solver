class Solution {
public:

    bool isSafe(int row,int col,vector<vector<char>>& board,char digit)
    {
        int n=board.size();
        for(int i=0;i<n;i++)
        {
            if(board[i][col]==digit)
            {
                return false;
            }
        }

         for(int i=0;i<n;i++)
        {
            if(board[row][i]==digit)
            {
                return false;
            }
        }

         for(int k=0;k<n;k++)
        {
            if(board[3*(row/3)+k/3][3*(col/3)+k%3]==digit)
            {
                return false;
            }
        }
        return true;

    }
    bool solve(vector<vector<char>>& board)
    {
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j]=='.')
                {
                    for(char digit='1';digit<='9';digit++)
                    {
                        if(isSafe(i,j,board,digit))
                        {
                            board[i][j]=digit;
                            bool RecAns=solve(board);
                            if(RecAns==true)
                            {
                                return true;
                            }
                            else{
                                board[i][j]='.';
                            }
                        }
                    }
                    return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
