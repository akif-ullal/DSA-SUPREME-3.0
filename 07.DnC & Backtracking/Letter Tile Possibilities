//my code
class Solution {
public:

        void solve(string &nums,int i,set<string>&newSet)
        {
        if(i>=nums.size())
        {
            newSet.insert(nums);
            return;
        }
        unordered_map<int,bool>mpp;
        for( int j=i;j<nums.size();j++)
        {
            if(mpp.find(nums[j])!=mpp.end())
            {
                continue;
            }
            mpp[nums[j]]=true;
            swap(nums[i],nums[j]);
            solve(nums,i+1,newSet);
            swap(nums[i],nums[j]);
        }
        }
        int numTilePossibilities(string tiles) {
        vector<string>subSeq;
        set<string>st;
        int totalcount =pow(2,tiles.size());
        for(int i=0;i<totalcount;i++)
        {
            string output;
            for(int j=0;j<tiles.size();j++)
            {
            int power=pow(2,j);
            if(i&(power))
            {
              output.push_back(tiles[j]);  
            }
            }
            if(output.size()>0)
            st.insert(output);   
        }
      set<string>newSet;
      int i=0;
       for(auto sub:st)
       {
        solve(sub,i,newSet);
       }
      
        return newSet.size();
    }
};

//optimal solu
  int count=0;
        void solve(string nums,int i)
        {
        count++;
        unordered_map<char,bool>mpp;
        for( int j=i;j<nums.size();j++)
        {
            if(mpp.find(nums[j])!=mpp.end())
            {
                continue;
            }
            mpp[nums[j]]=true;
            swap(nums[i],nums[j]);
            solve(nums,i+1);
            swap(nums[i],nums[j]);
        }

    }
    int numTilePossibilities(string tiles)
    {
       int i=0;
       solve(tiles,i);
       return count-1;
    }
    };
