class Solution {
public:
    unordered_map<int,bool>rowPlaced;
    unordered_map<int,bool>upPlaced;
    unordered_map<int,bool>downPlaced;
    void storeAns(vector<vector<string>>&ans,vector<vector<char>>&board,int n)
    {
        vector<string>tempAns;
        for(int i=0;i<n;i++)
        {
            string output="";
            for(int j=0;j<n;j++)
            {
                output.push_back(board[i][j]);
            }
            tempAns.push_back(output);
        }
        ans.push_back(tempAns);
    }
    bool isSafe(vector<vector<char>>&board,int row,int col)
    {
        if(rowPlaced[row]==true)
        {
            return false;
        }
        if(upPlaced[row+col]==true)
        {
            return false;
        }
        if(downPlaced[row-col]==true)
        {
            return false;
        }
        return true;
    }
    void solve(vector<vector<string>>&ans,vector<vector<char>>&board,int col,int n)
    {
        if(col>=n)
        {
            storeAns(ans,board,n);
            return;
        }

        for(int row=0;row<n;row++)
        {
            if(isSafe(board,row,col))
            {
                board[row][col]='Q';
                rowPlaced[row]=true;
                upPlaced[row+col]=true;
                downPlaced[row-col]=true;
                solve(ans,board,col+1,n);
                board[row][col]='.';
                rowPlaced[row]=false;
                upPlaced[row+col]=false;
                downPlaced[row-col]=false;

            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<vector<char>>board(n,vector<char>(n,'.'));
        int col=0;
        solve(ans,board,col,n);
        return ans;
    }
};
