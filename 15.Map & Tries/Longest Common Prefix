class Solution {
public:

class TrieNode{
  public:
  int data;
  bool isTerminal;
  unordered_map<char,TrieNode*>childrens;

  TrieNode(char val)
  {
    this->data=val;
    isTerminal=false;
  }
};

void insert(TrieNode*root,string word)
{
  if(word.size()==0)
  {
    root->isTerminal=true;
    return;
  }

  TrieNode*child;
  char ch=word[0];
  if(root->childrens.find(ch)!=root->childrens.end())
  {
    child=root->childrens[ch];
  }
  else
  {
    child=new TrieNode(ch);
    root->childrens[ch]=child;
  }
  insert(child,word.substr(1));
}

void findLCP(TrieNode*root,string &ans)
{
    if(root->isTerminal==true)
    {
        return;
    }
    TrieNode*child;
    if(root->childrens.size()==1)
    {
        for(auto [ch,node]:root->childrens)
        {
            ans.push_back(ch);
            child=node;
        }
        findLCP(child,ans);
    }
    else
    {
        return;
    }
    
}

    string longestCommonPrefix(vector<string>& strs) {
        TrieNode*root=new TrieNode('-');
        
        for(auto word:strs)
        {
            insert(root,word);
        }
        string ans;
        findLCP(root,ans);
        return ans;
    }
};
