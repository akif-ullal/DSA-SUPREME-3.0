class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        unordered_map<char,int>mapp;

        for(int i=0;i<tasks.size();i++)
        {
            mapp[tasks[i]]++;
        }
        priority_queue<int>p;

        for(auto task:mapp)
        {
            p.push(task.second);
        }

        int time=0;
        
        while(!p.empty())
        {
            int cycle=n+1;
            vector<int>temp;
            while(cycle > 0 && !p.empty())
            {
                int top = p.top();
                p.pop();
                time++;
                cycle--;
                top--;
                temp.push_back(top);
            }

            for(auto task:temp)
            {
                if(task > 0)
                p.push(task);
            }
            if(!p.empty())
            {
                time+=cycle;
            }

        }
        return time;

    }
};
