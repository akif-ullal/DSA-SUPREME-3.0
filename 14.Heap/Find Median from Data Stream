class MedianFinder {
public:
    double median;
    priority_queue<int>maxHeap;
    priority_queue<int,vector<int>,greater<int>>minHeap;
    MedianFinder() {
        median=0;
    }
    
    void addNum(int num) {
        if(maxHeap.size() == minHeap.size())
        {
            if(minHeap.empty() || num > minHeap.top())
            {
                minHeap.push(num);
                median=minHeap.top();

            }
            else
            {
                maxHeap.push(num);
                median=maxHeap.top();
            }
        }
        else if(maxHeap.size()+1 == minHeap.size())
        {
            if(median > num)
            {
                maxHeap.push(num);
                median=(minHeap.top()+maxHeap.top())/2.0;
            }
            else
            {
                int Ele=minHeap.top();
                minHeap.pop();
                maxHeap.push(Ele);
                minHeap.push(num);
                median=(minHeap.top()+maxHeap.top())/2.0;
            }
        }
        else if(maxHeap.size() == minHeap.size()+1)
        {
            if(median < num)
            {
                minHeap.push(num);
                median=(minHeap.top()+maxHeap.top())/2.0;
            }
            else
            {
                int ele=maxHeap.top();
                maxHeap.pop();

                minHeap.push(ele);
                maxHeap.push(num);
                median=(minHeap.top()+maxHeap.top())/2.0;
            }
        }
        
    }
    
    double findMedian() {
        return median;
    }
};
