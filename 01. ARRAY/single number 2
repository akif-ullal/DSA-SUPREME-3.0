class Solution {
public:
    int singleNumber(vector<int>& nums) {

    //     unordered_map<int,int> singlenumber;
    //     int n=nums.size();

    //     for(int i=0;i<n;i++)
    //     {
    //         int num=nums[i];
    //         singlenumber[num]=singlenumber[num]+1;
    //     }

    //     unordered_map<int,int>::iterator it;
    //     for(it=singlenumber.begin();it!=singlenumber.end();it++)
    //     {
    //         int key=it->first;
    //         int value=it->second;
    //         cout<<"key is: "<<key<<" "<<"value is: "<<value;
    //         if(value==1)
    //         {
    //             return key;
    //         }
    //     }
    //     return -1;


        
    // }

    //bucket list problem(optimal solution)
    // int one=0;
    // int two=0;
    // int n=nums.size();
    // for(int i=0;i<n;i++)
    // {
    //     one=(one^nums[i]) & ~two;
    //     two=(two^nums[i]) & ~one;
    //     cout<<" ones is: "<<one<<" "<<"twos are: "<<two<<endl;
    // }
    // return one;
    // }

    //using two pointer approach
    int n=nums.size();
    sort(nums.begin(),nums.end());
    int ans=-1;
    int i=1;
    while(i<n)
    {
        if(nums[i]!=nums[i-1])
        {
            return nums[i-1];
        }else{
            i=i+3;
        }
        cout<<i;
    }
    if(ans==-1)
    {
        return nums[n-1];
    }
    return ans;
    }

};
