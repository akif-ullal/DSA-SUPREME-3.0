class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {

    //     unordered_map<int,int> singlenumber;
    //     int n=nums.size();
    //     vector<int> ans;

    //     for(int i=0;i<n;i++)
    //     {
    //         int num=nums[i];
    //         singlenumber[num]=singlenumber[num]+1;
    //     }

    //     unordered_map<int,int>::iterator it;
    //     for(it=singlenumber.begin();it!=singlenumber.end();it++)
    //     {
    //         int key=it->first;
    //         int value=it->second;
    //         cout<<"key is: "<<key<<" "<<"value is: "<<value;
    //         if(value==1)
    //         {
    //             ans.push_back(key);
    //         }
    //     }
    //     return ans;


    // }
    int n=nums.size();
    long long int xorr=0;
    long long int firstbit=0;

    for(int i=0;i<n;i++)
    {
        xorr=xorr^nums[i];
        firstbit=(xorr&xorr-1)^xorr;
    }
    int b1=0;
    int b2=0; 
    for(int i=0;i<n;i++)
    {
        if((firstbit&nums[i])==0)
        {
          b1=b1^nums[i];
        }
        else if((firstbit&nums[i])>0)
        {
            b2=b2^nums[i];
        }
    }
    return {b2,b1};
    } 
};
