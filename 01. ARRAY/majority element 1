class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //using map
        // unordered_map<int,int> singlenumber;
        // int n=nums.size();
        // int maxi=INT_MIN;

        // for(int i=0;i<n;i++)
        // {
        //     int num=nums[i];
        //     singlenumber[num]=singlenumber[num]+1;
        // }

        // unordered_map<int,int>::iterator it;
        // for(it=singlenumber.begin();it!=singlenumber.end();it++)
        // {
        //     int key=it->first;
        //     int value=it->second;
        //     cout<<"key is: "<<key<<" "<<"value is: "<<value<<endl;
        //     maxi=max(maxi,value);
        //     if(value>n/2)
        //     {
        //         return key;
        //     }
           
        // }
        // return -1;
        
        //using brutforce approach

    //     int count=0;
    //     int ans=-1;
    //     int n=nums.size();
    //     for(int i=0;i<n;i++)
    //     {
    //         count=0;
    //         for(int j=0;j<n;j++)
    //         {
    //             if(nums[i]==nums[j])
    //             {
    //                 count++;
    //             }
               
    //         }
    //         if(count>n/2)
    //         {
    //             ans=nums[i];
    //         }
    //     }

    //    return ans;


    //using moores voting algorithm
    int n=nums.size();
    int ele;
    int count=0;
    for(int i=0;i<n;i++)
    {
        if(count==0)
        {
          ele=nums[i];
          count=1;
        }else if(ele==nums[i])
        {
            count++;
        }
        else{
            count--;
        }
    }

    for(int i=0;i<n;i++)
    {
        if(nums[i]==ele)
        {
            count++;
        }
        if(count>n/2)
        {
            return ele;
        }
    }
    return -1;
    }
};
