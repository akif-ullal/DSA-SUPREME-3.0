//solved using constraints

class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        vector<int> v(2001,0);
        for(int i:arr)
        {
            v[i+1000]++;
        }
        sort(v.begin(),v.end());

        for(int i=1;i<v.size();i++)
        {
            if(v[i]!=0 && v[i]==v[i-1])
            return 0;
        }
        return 1;
    }
};

//solved using map

class Solution {
public:
    bool uniqueOccurrences(vector<int>& arr) {
        unordered_map<int,int>table;
        vector<int> ans;
        set<int> set1;
        int n=arr.size();
        int m=set1.size();

        for(int i=0;i<arr.size();i++)
        {
            int num=arr[i];
            table[num]=table[num]+1;
            
        }
        unordered_map<int,int>::iterator it;
        for(it=table.begin();it!=table.end();it++)
        {
            int key=it->first;
            int value=it->second;
            cout<<key<<" "<<value<<" "<<endl;
           
            ans.push_back(value);
            set1.insert(value);
              
        }
        for(int i:set1)
        {
            cout<<i<<" ";
        }
        for(int i=0;i<ans.size();i++)
        {
            if(ans.size()==set1.size())
            {
                return 1;
            }
        }
     
        return 0;
        
    }
};

